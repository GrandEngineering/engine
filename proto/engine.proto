syntax = "proto3";
package engine;
service engine {
  rpc AquireTask(TaskRequest) returns (Task);
  rpc AquireTaskReg(empty) returns (TaskRegistry);
  rpc PublishTask(Task) returns (empty);
  rpc cgrpc(cgrpcmsg) returns (cgrpcmsg);
  rpc CreateTask(Task) returns (Task);
  rpc DeleteTask(TaskSelector) returns (empty);
  rpc GetTasks(TaskPageRequest) returns (TaskPage);
}
message TaskSelector {
  TaskState state = 1;
  string namespace = 2;
  string task = 3;
  string id = 4;
}
message empty {}
enum TaskState {
  QUEUED = 0;
  PROCESSING = 1;
  SOLVED = 2;
}
message TaskPageRequest {
  string namespace = 1;
  string task = 2;
  uint64 page = 3;
  uint32 pageSize = 4;
  TaskState state = 5;
}
message TaskPage {
  string namespace = 1;
  string task = 2;
  uint64 page = 3;
  uint32 pageSize = 4;
  TaskState state = 5;
  repeated Task tasks = 6;
}
message cgrpcmsg {
  string handler_mod_id = 1;
  string handler_id = 2;
  bytes event_payload = 3;
  string token = 4;
}

message TaskRegistry {
  repeated string tasks = 1; // namespace:task
}

message TaskRequest {
  string task_id = 1; // namespace:task
  // bytes payload = 2;
}
message Task {
  string id = 4; // the task unique identifier
  bytes task_payload = 1;
  string task_id = 2; // namespace:task
  bytes payload = 3;
}
